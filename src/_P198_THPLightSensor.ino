//#######################################################################################################
//#################################### Plugin 198: THPLightSensor
//####################################
//#######################################################################################################
#define _Digole_Serial_I2C_ // To tell compiler compile the special

#include "DigoleSerial.h"
#include <stdio.h>
/* Useful Constants */
#define MSEC_PER_SEC (1000UL)
#define MSECS_PER_MIN (60000UL)
#define MSEC_PER_HOUR (3600000UL)

/* Useful Macros for getting elapsed time */
#define numberOfHours(_time_) (_time_ / MSEC_PER_HOUR)
#define numberOfMinutes(_time_) ((_time_ % MSEC_PER_HOUR) / MSECS_PER_MIN)
#define numberOfSeconds(_time_)                                                \
  (((_time_ % MSEC_PER_HOUR) % MSECS_PER_MIN) / MSEC_PER_SEC)

// communication only,
// all available are:_Digole_Serial_UART_, _Digole_Serial_I2C_ and

char buf[50];

//--------I2C setup
#if defined(_Digole_Serial_I2C_)
//#include <Wire.h>
DigoleSerialDisp mydisp(&Wire, '\x27');
#endif

#define PLUGIN_198
#define PLUGIN_ID_198 198
#define PLUGIN_NAME_198 "THP Light Sensor"
#define PLUGIN_VALUENAME1_198 "Lux"
#define PLUGIN_VALUENAME2_198 "Ms"
#define PLUGIN_VALUENAME3_198 "Mtime"
#define PLUGIN_VALUENAME4_198 "Color"

#define BH1750_ADDRESS_1 0x23
#define BH1750_ADDRESS_2 0x5c
boolean blnPlugin_198_init1 = false;
boolean blnPlugin_198_init2 = false;
boolean blnPlugin_198_init3_time = false;
boolean blnPlugin_198_init4_onlyOnce = true;

const unsigned char fonts[] = {6, 10, 18, 51, 120, 123};
const char *fontdir[] = {"0\xb0", "90\xb0", "180\xb0", "270\xb0"};
static long max = 0;
static long avg = 0;
static long sum = 0;
long count = 1;
long secs = 1;

static const unsigned char PROGMEM endimage[] = {

    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000011, B11000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000011, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000011, B11000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000011, B11000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000011,
    B11000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000011, B11000000, B00000000, B00000000, B01100000, B11110000,
    B00000000, B00000000, B00000000, B00000000, B00000001, B11000000, B00000000,
    B00000000, B00000000, B00000000, B00000011, B11000011, B11111110, B01100000,
    B01101101, B11111000, B00001100, B00000000, B00000001, B10000000, B00000011,
    B11100000, B00000000, B00000000, B00000000, B00000000, B00000011, B11000011,
    B11100010, B11100000, B01101111, B00001100, B00001100, B00000000, B00000001,
    B10000000, B00000111, B00110000, B00000000, B00000000, B00000000, B00000000,
    B00000011, B11000000, B01100000, B11100000, B11001110, B00001100, B00001100,
    B00000110, B00000001, B10000001, B10000110, B00110000, B00000000, B00000000,
    B00000000, B00000000, B00000011, B11000000, B01100000, B11000000, B11001110,
    B00001100, B00001100, B00000100, B00000001, B10000001, B10001100, B00011000,
    B00000000, B00000000, B00000000, B00000000, B00000011, B11000000, B01100000,
    B11000000, B11001100, B00000100, B00001100, B00000000, B00000001, B10000001,
    B10001100, B00011000, B00000000, B00000000, B00000000, B00000000, B00000011,
    B11000000, B01100000, B11000000, B11001100, B00000100, B00001100, B00000100,
    B01110001, B10000001, B10001100, B00011000, B11000110, B11000000, B11100000,
    B11100010, B11000011, B11000000, B01000000, B11000000, B11001100, B00000100,
    B00001100, B00001100, B11111001, B11110001, B10000110, B00011001, B11110111,
    B11110001, B10110001, B11110011, B11100011, B11000000, B11000000, B11000000,
    B11001100, B00001100, B00001100, B00001100, B11001001, B11011111, B11100111,
    B00010011, B00110111, B10010001, B10011011, B00010011, B00100011, B11000000,
    B11000000, B11000000, B11001100, B00001100, B00001100, B00001101, B10001101,
    B10001111, B10000011, B10000011, B00011111, B00011011, B00011011, B00011011,
    B00000011, B11000000, B11000000, B11111111, B11101110, B00001000, B00001100,
    B00001101, B10001101, B10001101, B10000001, B11000011, B00111110, B00011001,
    B10011110, B00011011, B00000011, B11000000, B11000001, B11111111, B11001111,
    B10111000, B00001100, B00001101, B10001101, B10001101, B10000000, B11110011,
    B01110110, B00011001, B10010110, B00011011, B00000011, B11000000, B11000001,
    B11000000, B11001101, B11110000, B00001100, B00001101, B10001101, B10001101,
    B10000000, B00111011, B11100110, B00011000, B11100110, B00011011, B00000011,
    B11000000, B11000000, B11000000, B11001100, B00000000, B00001100, B00001101,
    B10001101, B10001101, B10000000, B00011011, B00011110, B00011010, B01110010,
    B00011011, B00000011, B11000000, B11000000, B11000000, B11101100, B00000000,
    B00001100, B01111101, B10011101, B10001101, B10001100, B00011011, B00111110,
    B00011011, B00011011, B00010011, B00000011, B11000000, B01100000, B11000000,
    B01101100, B00000000, B00000111, B11111100, B11111101, B10001101, B10001111,
    B11111001, B11110110, B00011001, B11111011, B11110011, B00000011, B11000000,
    B00000000, B01000000, B00000000, B00000000, B00000001, B00000000, B01001100,
    B00001100, B00000001, B11100000, B00000000, B00001000, B01100001, B11100000,
    B00000011, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00001100, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000011, B11000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00001100, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000011, B11000000, B00000011,
    B10001100, B00000000, B00000000, B00000000, B00000001, B00011100, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000011,
    B11000000, B00001111, B11111111, B00000000, B00000000, B00000000, B00000001,
    B11111000, B00000000, B00000000, B00000000, B00000000, B00000000, B01110001,
    B10000000, B00000011, B11000000, B00001100, B00000001, B00000000, B00000000,
    B00000000, B00000000, B00100000, B00000000, B00000000, B00000000, B00000000,
    B00000001, B11111111, B11100000, B00000011, B11000000, B00001000, B00000001,
    B10000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000001, B10000000, B00100000, B00000011, B11000000,
    B11111000, B00000001, B11110000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000001, B00000000, B00110000,
    B00000011, B11000001, B10011100, B00000001, B10011000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00011111,
    B00000000, B00111110, B00000011, B11000001, B00000100, B00000011, B00001000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00110011, B10000000, B00110011, B00000011, B11000001, B00000110,
    B00000110, B00001000, B00000000, B00000000, B11111001, B10000111, B11111000,
    B01111100, B00000000, B00000000, B00100000, B10000000, B01100001, B00000011,
    B11000001, B00000010, B01100100, B00001000, B00000000, B00000011, B11000011,
    B10001111, B10001101, B11100000, B00000000, B00000000, B00100000, B11000000,
    B11000001, B00000011, B11000011, B00000000, B11110000, B00001100, B00000000,
    B00000011, B00000011, B10001111, B10001101, B10000000, B00000000, B00000000,
    B00100000, B01001100, B10000001, B00000011, B11000010, B00000001, B11111000,
    B00001100, B00000000, B00000011, B00000011, B10001111, B00000101, B10000000,
    B00000000, B00000000, B01100000, B00011110, B00000001, B10000011, B11000110,
    B00000111, B00001110, B00000110, B00000000, B00000011, B00000011, B11001111,
    B00000101, B10000000, B00000000, B00000000, B01000000, B00111111, B00000001,
    B10000011, B11000100, B00000011, B01101100, B00000010, B00000000, B00000011,
    B01110011, B11001111, B00000101, B10111000, B00000000, B00000000, B11000000,
    B11100001, B11000000, B11000011, B11000110, B00000011, B01101100, B00000010,
    B00010111, B10000011, B11110011, B01001111, B00000101, B11111000, B00011110,
    B11110000, B10000000, B01101101, B10000000, B01000011, B11000110, B00011011,
    B00001101, B10000110, B00011011, B11000011, B00000011, B01101111, B00000101,
    B10000000, B00001111, B01111000, B11000000, B01101101, B10000000, B01000011,
    B11000011, B11110001, B11111001, B11111100, B00000000, B00000011, B00000011,
    B01101111, B00001101, B10000000, B00000000, B00000000, B11000011, B01100001,
    B10110000, B11000011, B11000001, B11000001, B11111000, B00011000, B00000000,
    B00000011, B00000011, B00101011, B00001001, B10000000, B00000000, B00000000,
    B01111110, B00111111, B00111111, B10000011, B11000001, B00000000, B00000000,
    B00011000, B00000000, B00000001, B00001011, B00111011, B00011000, B10000100,
    B00000000, B00000000, B00111000, B00111111, B00000011, B00000011, B11000001,
    B00000000, B01100000, B00001000, B00000000, B00000001, B11111111, B00011011,
    B11110000, B11111110, B00000000, B00000000, B00100000, B00000000, B00000011,
    B00000011, B11000001, B00000000, B01100000, B00001000, B00000000, B00000000,
    B11000000, B00000000, B11000000, B01100000, B00000000, B00000000, B00100000,
    B00001100, B00000001, B00000011, B11000001, B10000000, B01100000, B00011000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00100000, B00001100, B00000001, B00000011, B11000000, B11110000,
    B01100000, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00110000, B00001100, B00000011, B00000011,
    B11000000, B00111000, B01100001, B11000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00011110, B00001100,
    B00011110, B00000011, B11000000, B00001100, B11110011, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000111, B00001100, B00111000, B00000011, B11000000, B00000111, B10011111,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000001, B10011110, B01100000, B00000011, B11000000,
    B00000011, B00001100, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B11110011, B11100000,
    B00000011, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B01100001, B10000000, B00000011, B11000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000011, B11000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000011,
    B11000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000011, B11000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000011, B11000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000011, B11000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000011, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000011, B11000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000011, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111};

static const unsigned char PROGMEM welcomeimage[] = {

    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B01111110, B00000000,
    B01100011, B01111000, B01000000, B00000000, B00000100, B00000000, B00001111,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000011,
    B11111111, B00110000, B01110111, B11111100, B11100000, B00000000, B00001110,
    B00000000, B00011111, B10000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000011, B11111111, B01110000, B01100011, B11001110, B01100000,
    B01110000, B00001110, B00000000, B00111111, B11000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B01110000, B01110000, B11100011,
    B10000110, B01100000, B01110000, B00001110, B00000110, B00111001, B11000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B01110000,
    B01110000, B11100111, B00000110, B11100000, B00110000, B00001110, B00000110,
    B00110000, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B01110000, B01110000, B11100111, B00000110, B11100000, B01100011,
    B10001111, B00000110, B00110000, B11000111, B00001011, B00000011, B10000011,
    B10000101, B10000000, B00000000, B01110000, B01110000, B11100111, B00000110,
    B11100000, B01110011, B11001111, B11011111, B00111000, B11001111, B10011111,
    B11000111, B11100111, B11001111, B11000000, B00000000, B01110000, B01111111,
    B11110111, B00000110, B11100000, B01110111, B11101110, B11111111, B00011100,
    B00001111, B11011110, B11000110, B11100111, B01101110, B11000000, B00000000,
    B01110000, B11111111, B11100111, B00001110, B11100000, B01110110, B01111110,
    B11100110, B00001111, B00011101, B11011100, B11100110, B11101110, B01111110,
    B00000000, B00000000, B01110000, B01110000, B11100111, B11111100, B11100000,
    B01110110, B01111110, B01100110, B00000111, B10011111, B11011100, B11100111,
    B01001110, B01111110, B00000000, B00000000, B01110000, B01110000, B11100111,
    B11111000, B11100000, B01111110, B01101110, B01100110, B00000011, B11011111,
    B10011100, B11100111, B11001110, B01111110, B00000000, B00000000, B01110000,
    B01110000, B11100111, B00000000, B11100000, B01111110, B01101110, B01100110,
    B00100000, B11111100, B00011100, B01100101, B11101110, B01111110, B00000000,
    B00000000, B01110000, B01110000, B01100111, B00000000, B01111111, B01110110,
    B11101110, B01100110, B01111101, B11111111, B11011100, B11101110, B11101110,
    B01101110, B00000000, B00000000, B01110000, B01110000, B01100111, B00000000,
    B01111111, B01110111, B11101110, B01100110, B00111111, B11001111, B11011100,
    B11100111, B11100111, B11101110, B00000000, B00000000, B00010000, B00000000,
    B00000000, B00000000, B00010000, B00000011, B01100000, B01100000, B00000111,
    B00000010, B00000000, B01000001, B10000011, B10000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B01100000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00001100, B11100000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00001000,
    B00000000, B00000000, B00001111, B11100000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00011000, B00000000, B00000000, B00000011, B11000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00011000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00011000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000110, B00000000, B00000000, B00000000, B00000000, B01100001,
    B10011001, B10000110, B00001110, B11000010, B00001100, B01110000, B00000011,
    B00010000, B11101100, B00100001, B11000110, B00000000, B00000000, B00000000,
    B00000000, B11110011, B11011011, B11011110, B00011111, B11100111, B10011110,
    B01111011, B01101111, B00111101, B11111110, B01111011, B11101111, B00000000,
    B00000000, B00000000, B00000001, B10110111, B01111111, B01111010, B00011111,
    B01101101, B10011011, B11111011, B01101101, B01101101, B11110110, B11011011,
    B10110110, B00000000, B00000000, B00000000, B00000001, B10110110, B01111110,
    B01111000, B00011011, B01101111, B10000111, B01111011, B01101100, B01111101,
    B10110110, B11111011, B00110110, B00000000, B00000000, B00000000, B00000001,
    B10010110, B01111110, B01111000, B00011011, B01101111, B00011111, B01111011,
    B01101100, B01111001, B10110110, B11110011, B00110110, B00000000, B00000000,
    B00000000, B00000001, B10111110, B01111110, B01111000, B00011011, B01101101,
    B10110111, B11111111, B01101100, B01101101, B10110110, B11011011, B00110110,
    B00000000, B00000000, B00000000, B00000000, B11110011, B11011011, B11011000,
    B00011011, B01100111, B10111111, B11111001, B11101100, B00111101, B10110110,
    B01111011, B00110110, B00000000, B00000000, B00000000, B00000000, B00000001,
    B10000001, B10000000, B00000000, B00000000, B00000011, B00100000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000111, B11111100, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00001100,
    B00000110, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00111000, B00000111, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B01111000, B00000111, B11000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B11000100, B00000100,
    B01100000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B10000110, B00001100, B00100000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B10000010, B01001000, B00100000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000001, B10000000, B11100000, B00100000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B00000011,
    B10111000, B00110000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000011, B00000011, B11011000, B00010000, B00000000, B00000000, B00000000,
    B00000000, B11000001, B10001100, B00110010, B11000100, B01000000, B11100110,
    B00011100, B00000000, B00000011, B00000011, B11011000, B00010000, B00000000,
    B00000000, B00000000, B00000001, B10000000, B10001110, B01110111, B11101100,
    B11100001, B11110110, B00011111, B00000000, B00000001, B10011011, B00010110,
    B00110000, B00000000, B00000000, B00000000, B00000001, B10000000, B11001110,
    B01110111, B00101101, B10000001, B10110110, B00011001, B10000000, B00000000,
    B11110001, B11110011, B11100000, B00000000, B00000000, B00000000, B00000001,
    B10011000, B11001110, B01110110, B00101111, B00000011, B00110111, B10011001,
    B10000000, B00000000, B11000001, B00000000, B01000000, B00000000, B00000000,
    B00000000, B00000001, B10011100, B11001110, B01110110, B11101111, B00000011,
    B00000111, B10011011, B10000000, B00000000, B10000000, B01000000, B01100000,
    B00000000, B00000000, B00000000, B00000001, B10110100, B11001110, B11110111,
    B11101111, B00000011, B01110110, B11111111, B00000000, B00000000, B10000000,
    B01000000, B01100000, B00000000, B00000000, B00000000, B00000001, B10110100,
    B11001111, B11110110, B00111101, B10000011, B11111110, B11011111, B00000000,
    B00000000, B11100000, B01000000, B11000000, B00000000, B00000000, B00000000,
    B00000001, B10110110, B10001101, B10110110, B01111100, B11100011, B10110110,
    B11011011, B10000000, B00000000, B00110000, B01000011, B10000000, B00000000,
    B00000000, B00000000, B00000000, B10111101, B10001101, B10110111, B11101100,
    B01100001, B11110111, B10011000, B11000000, B00000000, B00011000, B11000110,
    B00000000, B00000000, B00000000, B00000000, B00000000, B10001000, B00000000,
    B00000000, B00000100, B00000000, B01000000, B00000000, B00000000, B00000000,
    B00001111, B11111100, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000011, B00011000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000};

boolean Plugin_198(byte function, struct EventStruct *event, String &string) {
  boolean success = false;
  static byte displayTimer = 0;

  switch (function) {

  case PLUGIN_DEVICE_ADD: {
    Device[++deviceCount].Number = PLUGIN_ID_198;
    Device[deviceCount].Type = DEVICE_TYPE_I2C;
    Device[deviceCount].VType = SENSOR_TYPE_QUAD;
    Device[deviceCount].Ports = 0;
    Device[deviceCount].PullUpOption = false;
    Device[deviceCount].InverseLogicOption = false;
    Device[deviceCount].FormulaOption = true;
    // Device[deviceCount].DecimalsOnly = true;
    Device[deviceCount].ValueCount = 4;
    Device[deviceCount].SendDataOption = true;
    Device[deviceCount].TimerOption = true;
    Device[deviceCount].GlobalSyncOption = true;
    break;
  }

  case PLUGIN_GET_DEVICENAME: {
    string = F(PLUGIN_NAME_198);
    break;
  }

  case PLUGIN_GET_DEVICEVALUENAMES: {
    strcpy_P(ExtraTaskSettings.TaskDeviceValueNames[0],
             PSTR(PLUGIN_VALUENAME1_198));
    strcpy_P(ExtraTaskSettings.TaskDeviceValueNames[1],
             PSTR(PLUGIN_VALUENAME2_198));
    strcpy_P(ExtraTaskSettings.TaskDeviceValueNames[2],
             PSTR(PLUGIN_VALUENAME3_198));
    strcpy_P(ExtraTaskSettings.TaskDeviceValueNames[3],
             PSTR(PLUGIN_VALUENAME4_198));
    break;
  }

  case PLUGIN_WEBFORM_LOAD: {
    //------------- Measure time -------------------------
    byte choice = Settings.TaskDevicePluginConfig[event->TaskIndex][0];
    String options[5];
    options[0] = F("60min - default");
    options[1] = F("30min");
    options[2] = F("15min");
    options[3] = F("10min");
    options[4] = F("5min");
    int optionValues[5];
    optionValues[0] = 60;
    optionValues[1] = 30;
    optionValues[2] = 15;
    optionValues[3] = 10;
    optionValues[4] = 5;
    string +=
        F("<TR><TD>Measure time:<TD><select name='plugin_198_measuretime'>");
    for (byte x = 0; x < 5; x++) {
      string += F("<option value='");
      string += optionValues[x];
      string += "'";
      if (choice == optionValues[x])
        string += F(" selected");
      string += ">";
      string += options[x];
      string += F("</option>");
    }
    string += F("</select>");

    byte choice1 = Settings.TaskDevicePluginConfig[event->TaskIndex][1];
    String options2[2];
    options2[0] = F("0x23 - default settings (ADDR Low)");
    options2[1] = F("0x5c - alternate settings (ADDR High)");
    int optionValues2[2];
    optionValues2[0] = 0;
    optionValues2[1] = 1;
    string += F("<TR><TD>BH1750 Address:<TD><select name='plugin_198_bh1750'>");
    for (byte x = 0; x < 2; x++) {
      string += F("<option value='");
      string += optionValues2[x];
      string += "'";
      if (choice == optionValues2[x])
        string += F(" selected");
      string += ">";
      string += options2[x];
      string += F("</option>");
    }
    string += F("</select>");

    byte choice3 = Settings.TaskDevicePluginConfig[event->TaskIndex][2];
    String options3[7];
    options3[0] = F("WHITE - default");
    options3[1] = F("GREEN");
    options3[2] = F("ORANGE");
    options3[3] = F("RED");
    options3[4] = F("BLUE");
    options3[5] = F("CYAN");
    options3[6] = F("VIOLETT");

    int optionValues3[7];
    optionValues3[0] = 0;
    optionValues3[1] = 1;
    optionValues3[2] = 2;
    optionValues3[3] = 3;
    optionValues3[4] = 4;
    optionValues3[5] = 5;
    optionValues3[6] = 6;
    string += F("<TR><TD>Choose color:<TD><select name='plugin_198_color'>");
    for (byte x = 0; x < 7; x++) {
      string += F("<option value='");
      string += optionValues3[x];
      string += "'";
      if (choice == optionValues3[x])
        string += F(" selected");
      string += ">";
      string += options3[x];
      string += F("</option>");
    }
    string += F("</select>");

    success = true;
    break;
  }

  case PLUGIN_WEBFORM_SAVE: {
    String plugin1 = WebServer.arg("plugin_198_measuretime");
    Settings.TaskDevicePluginConfig[event->TaskIndex][0] = plugin1.toInt();
    String plugin2 = WebServer.arg("plugin_198_bh1750");
    Settings.TaskDevicePluginConfig[event->TaskIndex][1] = plugin2.toInt();
    String plugin3 = WebServer.arg("plugin_198_color");
    Settings.TaskDevicePluginConfig[event->TaskIndex][2] = plugin3.toInt();
    success = true;
    break;
  }

  case PLUGIN_READ: {
    /** measurement time **/
    byte mtime = Settings.TaskDevicePluginConfig[event->TaskIndex][0];
    UserVar[event->BaseVarIndex + 2] = mtime;
    String log = F("Measure time: ");
    log += String(mtime, DEC);
    log += F("min | ");
    if (secs >= (mtime * 60)) {
      Plugin_198_setEndScreen();
      break;
    }
    // addLog(LOG_LEVEL_INFO, log);

    /** color **/
    String options3[7];
    options3[0] = F("WHITE - default");
    options3[1] = F("GREEN");
    options3[2] = F("ORANGE");
    options3[3] = F("RED");
    options3[4] = F("BLUE");
    options3[5] = F("CYAN");
    options3[6] = F("VIOLETT");
    byte color = Settings.TaskDevicePluginConfig[event->TaskIndex][2];
    UserVar[event->BaseVarIndex + 3] = color;
    log = F("color (");
    log += String(color, DEC);
    log += F(") - ");
    log += options3[color];
    log += F(" | ");

    // addLog(LOG_LEVEL_INFO, log);

    // --- I2C BH1750
    uint8_t address = -1;
    boolean *Plugin_198_init;

    if (Settings.TaskDevicePluginConfig[event->TaskIndex][1] == 0) {
      address = BH1750_ADDRESS_1;
      Plugin_198_init = &blnPlugin_198_init1;
    } else {
      address = BH1750_ADDRESS_2;
      Plugin_198_init = &blnPlugin_198_init2;
    }

    if (!*Plugin_198_init) {
      *Plugin_198_init = Plugin_198_setResolution(address);
    }

    if (Wire.requestFrom(address, (uint8_t)2) == 2) {
      byte b1 = Wire.read();
      byte b2 = Wire.read();
      float val = 0xffff;             // pm-cz: Maximum obtainable value
      if (b1 != 0xff || b2 != 0xff) { // pm-cz: Add maximum range check
        val = ((b1 << 8) | b2) / 1.2;
      }
      /** data format **/
      /** 0       1             2                 3
      /** value, milliseconds, measurement-time, color **/

      UserVar[event->BaseVarIndex] = val;
      UserVar[event->BaseVarIndex + 1] = millis();

      Plugin_198_UpdateLux((unsigned long)val);

      log += F("Lux (");
      log += UserVar[event->BaseVarIndex];
      log += F(") | ");
      log += (long)UserVar[event->BaseVarIndex + 1];
      log += F("ms |");

      addLog(LOG_LEVEL_INFO, log);
      // mydisp.setFont(fonts[3]);

      success = true;
    }
    break;
  }
  case PLUGIN_INIT: {
    mydisp.setPrintPos(0, 0, _TEXT_);
    delay(3000); // delay 2 seconds
    /*----------for text LCD adapter and graphic LCD adapter ------------*/
    mydisp.setColor(1);
    mydisp.clearScreen(); // CLear screen
    mydisp.disableCursor();
    mydisp.drawBitmap(0, 0, 128, 64, welcomeimage);
    delay(2000);
    mydisp.clearScreen();
    mydisp.drawStr(0, 1, "calibrating...");
    mydisp.drawStr(0, 2, "please wait");

    mydisp.begin();
    break;
  }

  case PLUGIN_ONCE_A_SECOND: {
    if (secs < (UserVar[event->BaseVarIndex + 2] * 60)) {
      if (blnPlugin_198_init4_onlyOnce && blnPlugin_198_init3_time) {
        Plugin_198_UpdateColor(UserVar[event->BaseVarIndex + 3]);
        blnPlugin_198_init4_onlyOnce = false;
      }
      if (blnPlugin_198_init3_time) {
        Plugin_198_UpdateScreenTime((long)UserVar[event->BaseVarIndex + 2]);
      }
    } else {
      blnPlugin_198_init3_time = false;
    }
  }
  // update screen time

  break;
  }
  return success;
}

void Plugin_198_UpdateLux(unsigned long lux) {
  const byte x = 0;
  const byte y = 0;
  const byte w = 128;
  const byte h = 30;
  if (!blnPlugin_198_init3_time) {
    mydisp.clearScreen();
    blnPlugin_198_init3_time = true;
  }
  sprintf(buf, "%05lu", lux);
  mydisp.disableCursor();
  // mydisp.setMode('^'); // XOR mode
  mydisp.setColor(0);
  mydisp.drawBox(x, y, w, h);
  mydisp.setFont(fonts[3]);
  mydisp.setColor(1);
  mydisp.setTextPosAbs(x + 5, y + 20);
  mydisp.print(buf);
  /*-- static text --*/
  mydisp.setFont(fonts[1]);
  mydisp.setTextPosAbs(80, y + 20);
  mydisp.print("lx");

  Plugin_198_LuxValues(x, y, w, h, lux);
}

void Plugin_198_LuxValues(uint8_t x, uint8_t y, uint8_t w, uint8_t h,
                          unsigned long lux) {

  if (lux > max) {
    max = lux;
  }
  sum += lux;
  avg = sum / count;
  count++;

  mydisp.setColor(1);
  mydisp.setFont(fonts[1]);
  sprintf(buf, "(M:%5lu|A:%5lu)lx", max, avg);
  mydisp.setTextPosAbs(1, y + h + 3);
  mydisp.print(buf);
}

void Plugin_198_UpdateColor(uint8_t color) {
  String options3[7];
  char b[10];
  options3[0] = F("WHITE");
  options3[1] = F("GREEN");
  options3[2] = F("ORANGE");
  options3[3] = F("RED");
  options3[4] = F("BLUE");
  options3[5] = F("CYAN");
  options3[6] = F("VIOLETT");
  if (color < sizeof(options3)) {
    options3[color].toCharArray(b, 10);
  } else {
    sprintf(b, "err");
  }
  sprintf(buf, "Color:%s", b);
  mydisp.setColor(1);
  mydisp.setFont(fonts[1]);
  mydisp.setTextPosAbs(0, 50);
  mydisp.print(buf);
}

void Plugin_198_UpdateScreenTime(long mtime) {
  long t = millis();
  uint8_t h = (uint8_t)numberOfHours(t);
  uint8_t m = (uint8_t)numberOfMinutes(t);
  uint8_t s = (uint8_t)numberOfSeconds(t);
  sprintf(buf, "%02d:%02d:%02d", h, m, s);
  mydisp.setColor(1); // white
  // mydisp.drawBox(60, 50, 68, 14);
  // mydisp.setColor(0);
  mydisp.setFont(fonts[1]);
  // mydisp.setMode('~');
  mydisp.setColor(1);
  mydisp.setTextPosAbs(70, 62);
  mydisp.print(buf);

  long elapsed = mtime * 60;
  elapsed -= ++secs;
  sprintf(buf, "R:%5lusec", elapsed);
  mydisp.setTextPosAbs(1, 62);
  mydisp.print(buf);
}

void Plugin_198_setEndScreen() {
  if (!blnPlugin_198_init4_onlyOnce) {
    /*----------for text LCD adapter and graphic LCD adapter ------------*/
    mydisp.setColor(1);
    mydisp.clearScreen(); // CLear screen
    mydisp.disableCursor();
    mydisp.drawBitmap(0, 0, 128, 64, endimage);
    secs = 99999;
  }
  blnPlugin_198_init4_onlyOnce = true;
}

boolean Plugin_198_setResolution(uint8_t address) {
  Wire.beginTransmission(address);
  Wire.write(0x10); // 1 lx resolution
  Wire.endTransmission();
  return true;
}
